Complexité Syllabus 2016 INFO_F101

1)
i=0
while i<n:
    t[i] = 0
    i += 3
O(n)

2)
def somme(c,a,b,n):
    for i in range(n):
        for j in range(n):
            c[i][j] = a[i][j] + b[j][i]
O(n²)

3)
for j in range(4):
    for i in range(n):
        t[i] *= t[i]
O(n)

4)
c=0
i=n * n
while i > 0:
    j=n
    while j > 0:
        c += 1
        j = j//4
    i = i//2
print c
O(n^3)

5)
def symetrie(a,n):
sym = True
i=0
while i<n and sym:
    j=0
    while j<i and sym:
    if a[i][j] != a [j][i]:
        sym = False
        j += 1
    i += 1
return sym
O(n²)

6)
def example1(arr):
    total = 0
    for num in arr:
        total += num
    return total
O(n)

7)
def example2(n):
    for i in range(n):
        print(i)
O(n)

8)
def example3(n):
    for i in range(n):
        for j in range(n):
            print(i, j)
O(n^2)

9)
def example4(arr):
    n = len(arr)
    for i in range(n):
        for j in range(i + 1, n):
            print(arr[i], arr[j])
O(n^2)

10)
def example5(n):
    i = 1
    while i < n:
        print(i)
        i *= 2
O(log n)

11)
def example6(n):
    total = 0
    for i in range(n):
        for j in range(n):
            total += i + j
    return total
O(n^2)

12)
def example7(arr):
    n = len(arr)
    for i in range(n):
        print(arr[i])
    for j in range(n):
        print(arr[j])
O(n)

13)
def example8(n):
    for i in range(n):
        for j in range(i):
            print(i, j)
O(n^2)

14)
def example9(n):
    i = 1
    while i < n:
        print(i)
        i *= 3
O(log n)

15)
def example10(n):
    for i in range(n):
        for j in range(n):
            for k in range(n):
                print(i, j, k)
O(n^3)

16)
def example11(arr):
    n = len(arr)
    for i in range(n):
        print(arr[i])
    for j in range(n):
        for k in range(n):
            print(arr[j], arr[k])
O(n^2)

17)
def example12(n):
    i = 1
    while i < n:
        j = 1
        while j < n:
            print(i, j)
            j *= 2
        i *= 2
O(n log n)

18)
def example13(arr):
    n = len(arr)
    prefix_sum = [0] * n
    prefix_sum[0] = arr[0]
    for i in range(1, n):
        prefix_sum[i] = prefix_sum[i - 1] + arr[i]
    return prefix_sum
O(n)

19)
def example14(n):
    if n <= 1:
        return
    print(n)
    example14(n // 2)
O(log n)

20)
def example15(n):
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            print(i, j)
            if j == i:
                break
O(n^2)

21)
def example16(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n):
            for k in range(n):
                print(arr[i], arr[j], arr[k])
O(n^3)

22)
def example17(n):
    i = 1
    while i < n:
        j = 1
        while j < i:
            print(i, j)
            j *= 2
        i *= 2
O(n log n)

23)
def example18(n):
    for i in range(n):
        for j in range(i):
            for k in range(j):
                print(i, j, k)
O(n^3)

24)
def example19(n):
    for i in range(1, n + 1):
        j = 1
        while j < n:
            print(i, j)
            j *= 2
O(n log n)

25)
def example20(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n):
            if i != j:
                print(arr[i], arr[j])
O(n^2)

26)
def example21(n):
    total = 0
    for i in range(n):
        total += i
    for j in range(n):
        total += j
    return total
O(n)

27)
def example22(n):
    for i in range(n):
        for j in range(n):
            for k in range(n):
                print(i, j, k)
O(n^3)

28)
def example23(n):
    for i in range(n):
        for j in range(i):
            for k in range(j):
                print(i, j, k)
O(n^3)

29)
def example24(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n):
            print(arr[i], arr[j])
O(n^2)

30)
def example25(n):
    for i in range(1, n + 1):
        j = 1
        while j < n:
            print(i, j)
            j *= 3
O(log n)

31) 
def example26(n):
    total = 0
    for i in range(n):
        for j in range(i):
            total += i + j
    return total
O(n^2)

32) 
def example27(n):
    for i in range(n):
        j = n
        while j > 1:
            print(i, j)
            j //= 2
O(n log n)

33)
def example28(n):
    i = 1
    while i < n:
        print(i)
        i *= 2
O(log n)

34)
def example29(arr):
    total = 0
    n = len(arr)
    for i in range(n):
        total += arr[i]
    for j in range(n):
        total -= arr[j]
    return total
O(n)

35)
def example30(n):
    for i in range(n):
        for j in range(i):
            for k in range(j):
                print(i, j, k)
                if k > i * j:
                    break
O(n^3)

36)
def example31(n):
    total = 0
    for i in range(n):
        total += i
    for j in range(2 * n):
        total += j
    return total
O(n)

37)
def example32(n):
    i = 1
    while i < n:
        j = 1
        while j < n:
            print(i, j)
            j *= 2
        i *= 2
O(log^2 n)

38)
def example33(n):
    total = 0
    for i in range(n):
        for j in range(n):
            for k in range(n):
                total += i + j + k
    return total
O(n^3)

39)
def example34(n):
    i = 1
    while i < n:
        print(i)
        i *= 3
O(log n)

40)